1. css原生的@import指令两大弊端：
	1.1 放在代码最前边；
	1.2 对性能不利，无法判断引入文件的优先级，就会出现阻塞；

2.使用css原生@import的既定规则：
	2.1 当@import后边跟的文件时以.css结尾时；
	2.2 当@import后边跟的是http://开头的字符串时；
	2.3 当@import后边跟的是一个url()函数时； //例如：@import url("variables.css");
	2.4 当@import后边带有media queries时。

3.基于sass的既定规则：
	3.1 没有文件后缀名的时候，sass会添加.scss或者.sass的后缀；
	3.2 统一目录下，局部文件和非局部文件不能重名，所以局部可以使用以下划线开头的文件名，在主文件引入时不需要加下划线；

4.变量操作：
	4.1 直接操作变量，即变量表达式；
	4.2通过函数：
		4.2.1 跟代码块无关的函数，多是自己内置函数，称functions；
		4.2.2 可重用的代码块，称mixin：1> 通过@include的方式调用； 2> 通过组合声明存在的 @extend 方式调用。

5.sass中的@media跟css的区别：《高级：适配》
	5.1 sass中的media query可以内嵌在css规则中，在生成css时media query才会被提到样式的最高层级。
	5.2 好处就是避免了重复书写选择器活着打乱样式表的流程。

6.浏览器解析选择器，时从右往左，即从最小单元开始逐层往上解析。通过嵌套，会有些副作用：
	6.1 增加了样式修饰的权重；
	6.2 制造了这种样式位置的依赖；

7.为了解决嵌套带来的副作用：使用sass提供的 @at-root 指令。


8.compass的学习
9.在config.rb中通过import引入模块；例如：require 'compass/import-once/activate'   require 'compass-normalize'；
	9.1其中import-once/activate的含义：指的是相同的模块被多次引用，也只会被加载一次并启用；如果不这样写
	，compass遇见@import指令就会加载一次，就会出现重复的代码，引起冗余。
	9.2如果真需要重复在其他文件中被引用，就模块后加感叹号，例如：@import "compass/reset!"




















